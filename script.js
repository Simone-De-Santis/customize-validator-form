$(document).ready(function () {
	'use strict'

	//^ oggetto per il confronto tra i dati inseriti
	const objLocalizationPath = {
		postalCodeRegex: {
			Andorra: "^(?:AD)*(\d{3})$",
			Afghanistan: "^(\d{4})$",
			AntiguaAndBarbuda: "^(\d{5})$",
			Anguilla: "^(AI-2640)$",
			Albania: "^(\d{4})$",
			Armenia: "^(\d{4})$",
			Antarctica: "^(7151)$",
			Argentina: "^([A-Z]\d{4}[A-Z]{3})|([A-Z]\d{4})$",
			AmericanSamoa: "^(\d{5})$",
			AustriaAustria: "^(\d{4})$",
			Australia: "^(\d{4})$",
			Aruba: "^(0000AW)$",
			AlandIslands: "^(\d{5})$",
			Azerbaijan: "^(AZ)(\d{4})$",
			BosniaAndHerzegovina: "^(\d{5})$",
			Barbados: "^(?:BB)*(\d{5})$",
			Bangladesh: "^(\d{4})$",
			Belgium: "^(\d{4})$",
			Bulgaria: "^(\d{4})$",
			Bahrain: "^(\d{3}\d?)$",
			SaintBarthélemy: "^(\d{5})$",
			Bermuda: "^([A-Z]{2}\d{2})$",
			BruneiDarussalam: "^([A-Z]{2}\d{4})$",
			BonaireSintEustatiusAndSaba: ["^(0000BQ)$", "^(\d{6})$"],
			Brazil: "^[0-9]{5}-[0-9]{3}$",
			Bhutan: "^(\d{5})$",
			Belarus: "^(\d{6})$",
			Canada: "^(?!.*[DFIOQU])[A-VXY][0-9][A-Z]+?[0-9][A-Z][0-9]$",
			Cocos: "^(6799W3)$",
			Switzerland: "^(\d{4})$",
			CookIslands: "\A(\d{7,7})\Z",
			Código: "^(\d{7})$",
			China: "^(\d{6})",
			Colombia: "^(\d{6})$",
			ClippertonIslands: "^(98799)$",
			CostaRica: "^(\d{5})$",
			Cuba: "^(?:CP)*(\d{5})$",
			CapeVerde: "^(\d{4})$",
			Curaçao: "^(0000CW)$",
			ChristmasIsland: "^(6978)$",
			Cyprus: "^(\d{4})$",
			CzechRepublic: "^[0-9]{3}[0-9]{2}$",
			Germany: "^(\d{5})$",
			Denmark: "^(\d{4})$",
			Dominican: "^(\d{5})$",
			Algeria: "^(\d{5})$",
			Ecuador: "^(\d{6})$",
			Estonia: "^(\d{5})$",
			Egypt: "^(\d{5})$",
			SahrawiArab: "^(\d{5})$",
			Eritrea: "^(\d{5})$",
			Ethiopia: "^(\d{4})$",
			Finland: "^(?:FI)*(\d{5})$",
			FalklandIslands: "^(FIQQ1ZZ)$",
			Micronesia: "^(\d{5})$",
			FaroeIslands: "^(?:FO)*(\d{3})$",
			France: "^(\d{5})$",
			UnitedKingdom: "^(?:(?:[A-PR-UWYZ][0-9]{1,2}|[A-PR-UWYZ][A-HK-Y][0-9]{1,2}",
			Georgia: "^(\d{4})$",
			FrenchGuiana: "^((973)\d{2})$",
			Guernsey: "((GY)([0-9][0-9A-HJKPS-UW]?|[A-HK-Y][0-9][0-9ABEHMNPRV-Y]?)[0-9][ABD-HJLNP-UW-Z]{2})",
			Gibraltar: "^(GX111AA)$",
			Greenland: "^(\d{4})$",
			Guinea: "^(\d{3})$",
			Guadeloupe: "^((971)[0-9][0-0])$",
			Greece: "^(\d{3})\d{2}$",
			SouthGeorgia: "^(SIQQ1ZZ)$",
			Guatemala: "^(\d{5})$",
			Guam: "^((969)[1-3][0-2])$",
			Guinea: "^(\d{4})$",
			HongKong: "^(999077)$",
			HeardIsland: "^(7151)$",
			McDonaldIslands: "^(7151)$",
			Honduras: "^(\d{5})$",
			Croatia: "^(?:HR)*(\d{5})$",
			Haiti: "^(?:HT)*(\d{4})$",
			Hungary: "^(\d{4})$",
			Indonesia: "^(\d{5})$",
			Israel: "^(\d{7})$",
			IsleOfMan: "((IM)([0-9][0-9A-HJKPS-UW]?|[A-HK-Y][0-9][0-9ABEHMNPRV-Y]?)[0-9][ABD-HJLNP-UW-Z]{2})",
			India: "^(\d{6})$",
			British: "^(BB9D1ZZ)$",
			Iraq: "^(\d{5})$",
			Iran: "^\d{5}([\-]\d{5})?$",
			Iceland: "^(\d{3})$",
			Italy: "^(\d{5})$",
			Jersey: "(JE)([0-9]\d{1})",
			Jamaica: "^((JM)[A-Z]{3,3}\d{2,2})$",
			Jordan: "^(\d{5})$",
			Japan: "^(\d{3}-\d{4})$",
			Kenya: "^(\d{5})$",
			Kyrgyzstan: "^(\d{6})$",
			Cambodia: "^(\d{5})$",
			SouthKorea: "^(\d{5})$",
			Kuwait: "^(\d{5})$",
			CaymanIslands: "^[K][Y][0-9]{1}[-]([0-9]){4}$",
			Kazakhstan: "^(\d{6})$",
			Laos: "^(\d{5})$",
			Lebanon: "^(\d{4}(\d{4})?)$",
			Liechtenstein: "^(\d{4})$",
			SriLanka: "^(\d{5})$",
			Liberia: "^(\d{4})$",
			Lesotho: "^(\d{3})$",
			Lithuania: "^(?:LT)*(\d{5})$",
			Luxembourg: "^(\d{4})$",
			Latvia: "^[L]{1}[V]{1}[-]([0-9]){4}$",
			Libya: "^(\d{5})$",
			Morocco: "^(\d{5})$",
			Monaco: "^(\d{5})$",
			Moldova: "^(?:MD)*(\d{4})$",
			Montenegro: "^(\d{5})$",
			SaintMartin: "^(\d{5})$",
			Madagascar: "^(\d{3})$",
			MarshallIslands: "^((969)[6-7][0-9])$",
			Macedonia: "^(\d{4})$",
			Myanmar: "^(\d{5})$",
			Mongolia: "^(\d{5})$",
			Macau: "^(999078)$",
			NorthernMarianaIslands: "^(\d{5})$",
			Martinique: "^(\d{5})$",
			Montserrat: "^(?:MSR)*(\d{4})$",
			Malta: "^[A-Z]{3}[0-9]{4}$",
			Mauritius: "^([0-9A-Z]\d{4})$",
			Maldives: "^(\d{5})$",
			Mexico: "^(\d{5})$",
			Malaysia: "^(\d{5})$",
			Mozambique: "^(\d{4})$",
			NewCaledonia: "^(\d{5})$",
			Niger: "^(\d{4})$",
			NorfolkIsland: "^(2899)$",
			Nigeria: "^(\d{6})$",
			Nicaragua: "^(\d{5})$",
			Netherlands: "[0-9]{4}[A-Z]{2}",
			Norway: "^(\d{4})$",
			Nepal: "^(\d{5})$",
			NewZealand: "^(\d{4})$",
			Oman: "^(\d{3})$",
			Peru: "^(\d{5})$",
			FrenchPolynesia: "^((987)\d{2})$",
			PapuaNewGuinea: "^(\d{3})$",
			Philippines: "^(\d{4})$",
			Pakistan: "^(\d{5})$",
			Poland: "^[0-9]{2}[-]([0-9]){3}$",
			Saint: "^(\d{5})$",
			Pitcairn: "^(PCR91ZZ)$",
			PuertoRico: "^\d{5}((-|\s)?\d{4})?$",
			Palestina: "^([P]\d{3}(\d{4})?)$",
			Portugal: "^\d{4}((-|\s)?\d{3})?$",
			Palau: "^(96940)$",
			Paraguay: "^(\d{4})$",
			Réunion: "(FR)[9]{1}[7|8][4|7|8]\d{2}",
			Romani: "^(\d{6})$",
			Serbia: "^(\d{5})$",
			Russia: "^(\d{6})$",
			SaudiArabia: "^\d{5}([\-]\d{4})?$",
			Sudan: "^(\d{5})$",
			Sweden: "^(\d{3}\d{2})$",
			Singapore: "^(\d{6})$",
			SaintHelena: "^(ASCN1ZZ)$",
			Slovenia: "^(\d{4})$",
			Svalbard: "^(\d{4})$",
			Slovakia: "^(\d{3}\d{2})$",
			SanMarino: "^(4789\d)$",
			Senegal: "^(\d{5})$",
			SouthSudan: "^(\d{5})$",
			ElSalvador: "^(1101)$",
			SintMaarten: "^(0000AA)$",
			Swaziland: "^([A-Z]\d{3})$",
			TurksAndCaicos: "^(TKCA1ZZ)$",
			Chad: "^(\d{5})$",
			FrenchSouthern: "^((984)\d{2})$",
			Thailand: "^(\d{5})$",
			Tajikistan: "^(\d{3})$",
			Turkmenistan: "^(\d{6})$",
			Tunisia: "^(\d{4})$",
			Turkey: "^(\d{5})$",
			Taiwan: "^(\d{3}\d{2})|(\d{3})$",
			Tanzania: "^(\d{5})$",
			Ukraine: "^(\d{5})$",
			UnitedStatesMinorOutlyingIslands: "^(96898)$",
			UnitedStates: "^[0-9]{5}(?:-[0-9]{4})?$",
			Uruguay: "^(\d{5})$",
			Uzbekistan: "^(\d{6})$",
			VaticanCity: "(120)",
			ASaintVincent: "(VC)(\d{4})",
			Venezuela: "^(\d{4})$",
			BritishVirginIslands: "^(VG11)[0-6][0]$",
			USVirginIslands: "^(\d{5})$",
			VietNam: "^(\d{6})$",
			Mayotte: "^(\d{5})$",
			SouthAfrica: "^(\d{4})$",
			Zambia: "^(\d{5})$"
		},
		italia: {
			localization: "italia",
			prefixInternational: ["+39", "0039"],
			cellular: {
				minLength: 6,
				maxLength: 10,
				prefixCompanyCellular: [
					"330",
					"333",
					"334",
					"335",
					"336",
					"337",
					"338",
					"339",
					"360",
					"363",
					"366",
					"368",
					"352",
					"340",
					"342",
					"345",
					"346",
					"347",
					"348",
					"349",
					"320",
					"323",
					"327",
					"328",
					"329",
					"380",
					"383",
					"388",
					"389",
					"390",
					"391",
					"392",
					"393",
					"397",
					"331",
					"370",
					"353",
					"375",
					"379",
					"373",
					"350",
					"351",
					"382",
					"376",
					"371",
					"377",
					"378",
				]
			},
			homePhone: {
				minLength: 6,
				maxLength: 10,
				prefixRegionHomePhone: [
					"004191",
					"010",
					"011",
					"012",
					"012",
					"012",
					"012",
					"012",
					"013",
					"014",
					"014",
					"014",
					"014",
					"015",
					"016",
					"016",
					"016",
					"016",
					"017",
					"017",
					"017",
					"017",
					"017",
					"018",
					"018",
					"018",
					"018",
					"018",
					"019",
					"02",
					"030",
					"031",
					"032",
					"032",
					"032",
					"032",
					"033",
					"033",
					"034",
					"034",
					"034",
					"034",
					"034",
					"034",
					"035",
					"036",
					"036",
					"036",
					"036",
					"037",
					"037",
					"037",
					"037",
					"037",
					"037",
					"037",
					"038",
					"038",
					"038",
					"038",
					"038",
					"038",
					"039",
					"040",
					"041",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"044",
					"044",
					"044",
					"045",
					"046",
					"046",
					"046",
					"046",
					"046",
					"047",
					"047",
					"047",
					"047",
					"048",
					"049",
					"050",
					"051",
					"052",
					"052",
					"052",
					"052",
					"052",
					"053",
					"053",
					"053",
					"053",
					"053",
					"054",
					"054",
					"054",
					"054",
					"054",
					"054",
					"054",
					"055",
					"056",
					"056",
					"056",
					"057",
					"057",
					"057",
					"057",
					"057",
					"057",
					"057",
					"058",
					"058",
					"058",
					"058",
					"058",
					"058",
					"059",
					"06070",
					"071",
					"072",
					"072",
					"073",
					"073",
					"073",
					"073",
					"073",
					"073",
					"073",
					"074",
					"074",
					"074",
					"074",
					"075",
					"076",
					"076",
					"076",
					"076",
					"077",
					"077",
					"077",
					"077",
					"077",
					"078",
					"078",
					"078",
					"078",
					"078",
					"078",
					"079",
					"080",
					"081",
					"082",
					"082",
					"082",
					"082",
					"082",
					"083",
					"083",
					"083",
					"083",
					"083",
					"085",
					"086",
					"086",
					"086",
					"086",
					"086",
					"087",
					"087",
					"087",
					"087",
					"087",
					"088",
					"088",
					"088",
					"088",
					"088",
					"089",
					"090",
					"091",
					"092",
					"092",
					"092",
					"092",
					"092",
					"093",
					"093",
					"093",
					"093",
					"093",
					"094",
					"094",
					"095",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"097",
					"097",
					"097",
					"097",
					"097",
					"097",
					"098",
					"098",
					"098",
					"098",
					"098",
					"099",
				],
			}
		},
		spagna: {
			localization: "italia",
			prefixInternational: ["+38", "0038"],
			cellular: {
				minLength: 6,
				maxLength: 10,
				prefixCompanyCellular: [
					"330",
					"333",
					"334",
					"335",
					"336",
					"337",
					"338",
					"339",
					"360",
					"363",
					"366",
					"368",
					"352",
					"340",
					"342",
					"345",
					"346",
					"347",
					"348",
					"349",
					"320",
					"323",
					"327",
					"328",
					"329",
					"380",
					"383",
					"388",
					"389",
					"390",
					"391",
					"392",
					"393",
					"397",
					"331",
					"370",
					"353",
					"375",
					"379",
					"373",
					"350",
					"351",
					"382",
					"376",
					"371",
					"377",
					"378",
				]
			},
			homePhone: {
				minLength: 6,
				maxLength: 10,
				prefixRegionHomePhone: [
					"004191",
					"010",
					"011",
					"012",
					"012",
					"012",
					"012",
					"012",
					"013",
					"014",
					"014",
					"014",
					"014",
					"015",
					"016",
					"016",
					"016",
					"016",
					"017",
					"017",
					"017",
					"017",
					"017",
					"018",
					"018",
					"018",
					"018",
					"018",
					"019",
					"02",
					"030",
					"031",
					"032",
					"032",
					"032",
					"032",
					"033",
					"033",
					"034",
					"034",
					"034",
					"034",
					"034",
					"034",
					"035",
					"036",
					"036",
					"036",
					"036",
					"037",
					"037",
					"037",
					"037",
					"037",
					"037",
					"037",
					"038",
					"038",
					"038",
					"038",
					"038",
					"038",
					"039",
					"040",
					"041",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"042",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"043",
					"044",
					"044",
					"044",
					"045",
					"046",
					"046",
					"046",
					"046",
					"046",
					"047",
					"047",
					"047",
					"047",
					"048",
					"049",
					"050",
					"051",
					"052",
					"052",
					"052",
					"052",
					"052",
					"053",
					"053",
					"053",
					"053",
					"053",
					"054",
					"054",
					"054",
					"054",
					"054",
					"054",
					"054",
					"055",
					"056",
					"056",
					"056",
					"057",
					"057",
					"057",
					"057",
					"057",
					"057",
					"057",
					"058",
					"058",
					"058",
					"058",
					"058",
					"058",
					"059",
					"06070",
					"071",
					"072",
					"072",
					"073",
					"073",
					"073",
					"073",
					"073",
					"073",
					"073",
					"074",
					"074",
					"074",
					"074",
					"075",
					"076",
					"076",
					"076",
					"076",
					"077",
					"077",
					"077",
					"077",
					"077",
					"078",
					"078",
					"078",
					"078",
					"078",
					"078",
					"079",
					"080",
					"081",
					"082",
					"082",
					"082",
					"082",
					"082",
					"083",
					"083",
					"083",
					"083",
					"083",
					"085",
					"086",
					"086",
					"086",
					"086",
					"086",
					"087",
					"087",
					"087",
					"087",
					"087",
					"088",
					"088",
					"088",
					"088",
					"088",
					"089",
					"090",
					"091",
					"092",
					"092",
					"092",
					"092",
					"092",
					"093",
					"093",
					"093",
					"093",
					"093",
					"094",
					"094",
					"095",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"096",
					"097",
					"097",
					"097",
					"097",
					"097",
					"097",
					"098",
					"098",
					"098",
					"098",
					"098",
					"099",
				],
			}
		},


	};

	function filterNumberNotZero(value) {
		if (value == '0') {
			return value
		} else if (Number(value)) {
			return value
		} else {
			return
		}
	}
	// !creiamo una funzione unica per iil check dei prefissi per per cellular che per home 
	function prefixCutCheckAll(arr, country, type) {
		let numberArr = arr
		let objPathType;
		let isValid = false;
		//^ in base all type settima una variabile per andare a fare il ciclo e il controllo 
		if (type == 'cellular') {
			objPathType = 'prefixCompanyCellular';
		} else if (type == 'homePhone') {
			objPathType = 'prefixRegionHomePhone';
		}
		//^  cicliamo e tagliamo il prefisso internazionale se è inserito
		objLocalizationPath[country].prefixInternational.map((items, index) => {
			//^ ciclando sul prefisso internazionale nell'oggetto di validazione andiamo a fare un check sul numero inserito dall'utente ed eventualmente andiamo a talgiare lo stessa quantità di numeri per farci tornare un numero pulito senza prefisso internazionale
			let arrPrefix = [];
			for (let i = 0; i < items.length; i++) {
				arrPrefix.push(numberArr[i])
			}
			if (JSON.stringify(arrPrefix.join("")) == JSON.stringify(items)) {
				numberArr.splice(0, items.length);
			}
		});

		numberArr = arr.filter((value) => filterNumberNotZero(value));
		console.log('dovrebbe essere solo number', type)

		//^ eseguimao il check del prefisso di cellulare o del prefisso regionale per validare il numero
		objLocalizationPath[country][type][objPathType].forEach((items) => {
			let arrPrefix = [];
			for (let i = 0; i < items.length; i++) {
				arrPrefix.push(numberArr[i])
			}
			if (JSON.stringify(arrPrefix.join("")) == JSON.stringify(items)) {
				isValid = true;
			}
		});

		//^ check length numero senza prefisso spazzi e caratteri non numerici


		isValid = numberArr.length >= objLocalizationPath[country][type].minLength && numberArr.length <= objLocalizationPath[country][type].maxLength ? true : false

		console.log('validation', isValid);
		return isValid;
	}

	function validazioneEmail(email) {

		// se non ho inserito nulla nel campo
		if (email == '') { return false; }
		// verifico se è un indirizzo valido
		if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)) {
			return true;
		}
		else {
			return false;
		}

	}




	//^ funzione per sanitize il numero di telefono e restituirlo senza l'eventuale prefisso
	// function prefixCutCellular(arr, country, type) {
	// 	const x = arr;
	// 	objLocalizationPath[country][type].prefixCellular.map((items, index) => {
	// 		//^ creiamo un array con i primi valori inseriti dall'utente in riferimento al controllo che andiamo a fare 
	// 		//^ i primi 3 se il controllo lo andiamo a fare con un campo che ha 3 valori e 4 su 4 e così via
	// 		let arrPrefix = [];
	// 		for (let i = 0; i < items.length; i++) {
	// 			arrPrefix.push(x[i])
	// 		}
	// 		if (JSON.stringify(arrPrefix.join("")) == JSON.stringify(items)) {
	// 			x.splice(0, items.length);
	// 		}
	// 	});
	// 	return x;
	// };
	// function checkPrefixCompanyCellular(arr, country, type) {
	// 	//- const x = arr;
	// 	let isValid = false;

	// 	objLocalizationPath[country][type].prefixCompanyCellular.forEach((items) => {
	// 		// -console.log('items company', items);
	// 		//- console.log('arr', arr);
	// 		let arrPrefix = [];
	// 		for (let i = 0; i < items.length; i++) {
	// 			arrPrefix.push(arr[i])
	// 		}
	// 		if (JSON.stringify(arrPrefix.join("")) == JSON.stringify(items)) {
	// 			isValid = true;
	// 		}

	// 	});
	// 	return isValid;
	// };
	// function checkprefixRegionHomePhone(arr, country, type) {
	// 	//^ filtriamo il valore dell'arr per pulirlo da elementi che non sono numeri
	// 	const x = arr.filter((value) => filterNumberNotZero(value));
	// 	console.log('arr', x)
	// 	//^ mettiamo in un array un numero di campi uguali a quelli presenti con l'elemento di confronto
	// 	objLocalizationPath[country][type].prefixRegionHomePhone.map((items, index) => {
	// 		let arrPrefix = [];
	// 		for (let i = 0; i < items.length; i++) {
	// 			arrPrefix.push(x[i])
	// 		}
	// 		//^ se troviamo il mech tra l'elemento arrPrefix e gli elementi presenti in array andiamo a validare il record
	// 		if (JSON.stringify(arrPrefix.join("")) == JSON.stringify(items)) {
	// 			console.log('prefix trovato', arrPrefix.join(""), JSON.stringify(items))
	// 		}
	// 	});
	// 	console.log(x)
	// 	// return x;
	// };

	$(".form").submit(function (e) {
		//^ preveniamo il default
		e.preventDefault();
		//^ prendiamo tutti i valori delle input
		$(".form input").each(function (index, items) {
			//^ controlliamo che valore è richiesto nel labeel e attiviamo la validazione di riferimento 
			let isValid = false;

			console.log(items.getAttribute("data-validate-type"))

			if (items.value) {
				// ! VALIDAZIONE NUMERO DI CELLULARE
				if (items.getAttribute("data-validate-type") == 'cellular') {
					let arrPhoneNumber = items.value.trim().split("");
					isValid = prefixCutCheckAll(
						arrPhoneNumber,
						items.getAttribute("data-validate-country"),
						items.getAttribute("data-validate-type")
					)
				}
				// ! VALIDAZIONE NUMERO DI FISSO
				if (items.getAttribute("data-validate-type") == 'homePhone') {
					let arrPhoneNumber = items.value.trim().split("");
					isValid = prefixCutCheckAll(
						arrPhoneNumber,
						items.getAttribute("data-validate-country"),
						items.getAttribute("data-validate-type")
					)
				}
				// ! VALIDAZIONE EMAIL
				if (items.getAttribute("data-validate-type") == 'email') {
					isValid = validazioneEmail(items.value.trim())
				}
			}
			//^ cambiamo la classe sul front end in basse all ckeck della funzione
			$(items).removeClass('is-valid').removeClass('is-invalid').addClass(isValid ? 'is-valid' : 'is-invalid')
		});
	});
});
